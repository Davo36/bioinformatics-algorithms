* DONE CODE CHALLENGE: Implement BWMATCHING.
     Input: A string BWT(Text), followed by a collection of Patterns.
     Output: A list of integers, where the i-th integer corresponds to the number of substring
     matches of the i-th member of Patterns in Text.

Extra Dataset

Sample Input:
TCCTCTATGAGATCCTATTCTATGAAACCTTCA$GACCAAAATTCTCCGGC
CCT CAC GAG CAG ATC
Sample Output:
2 1 1 0 1
* DONE CODE CHALLENGE: Implement BETTERBWMATCHING.
     Input: A string BWT(Text) followed by a collection of strings Patterns.
     Output: A list of integers, where the i-th integer corresponds to the number of substring
     matches of the i-th member of Patterns in Text.

Extra Dataset

Sample Input:
GGCGCCGC$TAGTCACACACGCCGTA
ACC CCG CAG
Sample Output:
1 2 1

Time Limit: 5 mins
* DONE CODE CHALLENGE: Solve the Multiple Pattern Matching Problem.
     Input: A string Text followed by a collection of strings Patterns.
     Output: All starting positions in Text where a string from Patterns appears as a substring.

Extra Dataset

Sample Input:
AATCGGGTTCAATCGGGGT
ATCG
GGGT
Sample Output:
1 4 11 15

Time Limit: 5 mins
* TODO You should now be ready to design your own approach to solve the Multiple Approximate Pattern Matching Problem and use this solution to map real sequencing reads.

CODE CHALLENGE: Solve the Multiple Approximate Pattern Matching Problem.
     Input: A string Text, followed by a collection of strings Patterns, and an integer d.
     Output: All positions where one of the strings in Patterns appears as a substring of Text with
     at most d mismatches.

Extra Dataset

Sample Input:
ACATGCTACTTT
ATT GCC GCTA TATT
1
Sample Output:
2 4 4 6 7 8 9

Time Limit: 5 mins



* general test
smnpbnnaaaaa$a
ana



* DONE 
Sample Input:
4
0->4:11
1->4:2
2->5:6
3->5:7
4->0:11
4->1:2
4->5:4
5->4:4
5->3:7
5->2:6
Sample Output:
0	13	21	22
13	0	12	13
21	12	0	13
22	13	13	0

* DONE 
Sample Input:
4
1
0	13	21	22
13	0	12	13
21	12	0	13
22	13	13	0
Sample Output:
2

* TODO 
Sample Input:
4
0	13	21	22
13	0	12	13
21	12	0	13
22	13	13	0
Sample Output:
0->4:11
1->4:2
2->5:6
3->5:7
4->0:11
4->1:2
4->5:4
5->4:4
5->3:7
5->2:6

* DONE 
Sample Input:
4
0	20	17	11
20	0	20	13
17	20	0	10
11	13	10	0
Sample Output:
0->5:7.000
1->6:8.833
2->4:5.000
3->4:5.000
4->2:5.000
4->3:5.000
4->5:2.000
5->0:7.000
5->4:2.000
5->6:1.833
6->5:1.833
6->1:8.833

* DONE 
Sample Input:
4
0	23	27	20
23	0	30	28
27	30	0	30
20	28	30	0
Sample Output:
0->4:8.000
1->5:13.500
2->5:16.500
3->4:12.000
4->5:2.000
4->0:8.000
4->3:12.000
5->1:13.500
5->2:16.500
5->4:2.000

* DONE 
CODE CHALLENGE: Implement SmallParsimony to solve the Small Parsimony Problem.
     Input: An integer n followed by an adjacency list for a rooted binary tree with n leaves
     labeled by DNA strings.
     Output: The minimum parsimony score of this tree, followed by the adjacency list of the
     tree corresponding to labeling internal nodes by DNA strings in order to minimize the
     parsimony score of the tree.

Note: Remember to run SmallParsimony on each individual index of the strings at the leaves of the tree.

Extra Dataset

Sample Input:
4
4->CAAATCCC
4->ATTGCGAC
5->CTGCGCTG
5->ATGGACGA
6->4
6->5
Sample Output:
16
ATTGCGAC->ATAGCCAC:2
ATAGACAA->ATAGCCAC:2
ATAGACAA->ATGGACTA:2
ATGGACGA->ATGGACTA:1
CTGCGCTG->ATGGACTA:4
ATGGACTA->CTGCGCTG:4
ATGGACTA->ATGGACGA:1
ATGGACTA->ATAGACAA:2
ATAGCCAC->CAAATCCC:5
ATAGCCAC->ATTGCGAC:2
ATAGCCAC->ATAGACAA:2
CAAATCCC->ATAGCCAC:5

* DONE CODE CHALLENGE: Solve the Small Parsimony in an Unrooted Tree Problem.
     Input: An integer n followed by an adjacency list for an unrooted binary tree with n leaves
     labeled by DNA strings.
     Output: The minimum parsimony score of this tree, followed by the adjacency list of the
     tree corresponding to labeling internal nodes by DNA strings in order to minimize the
     parsimony score of the tree.

Extra Dataset

Sample Input:
4
TCGGCCAA->4
4->TCGGCCAA
CCTGGCTG->4
4->CCTGGCTG
CACAGGAT->5
5->CACAGGAT
TGAGTACC->5
5->TGAGTACC
4->5
5->4
Sample Output:
17
TCGGCCAA->CCAGGCAC:4
CCTGGCTG->CCAGGCAC:3
TGAGTACC->CAAGGAAC:4
CCAGGCAC->CCTGGCTG:3
CCAGGCAC->CAAGGAAC:2
CCAGGCAC->TCGGCCAA:4
CACAGGAT->CAAGGAAC:4
CAAGGAAC->CACAGGAT:4
CAAGGAAC->TGAGTACC:4
CAAGGAAC->CCAGGCAC:2

Time Limit: 5 mins

* DONE Sample Input:
5 4
0->4
4->0
1->4
4->1
2->5
5->2
3->5
5->3
4->5
5->4
Sample Output:
1->4
0->5
3->4
2->5
5->2
5->4
5->0
4->1
4->5
4->3

1->5
0->4
3->4
2->5
5->2
5->4
5->1
4->0
4->5
4->3

* DONE 
Sample Input:
4
CGAAGATTCTAA->4
ATGCCGGGCTCG->4
CTTTTAGAAGCG->5
AACTCATGATAT->5
5->AACTCATGATAT
5->CTTTTAGAAGCG
5->4
4->ATGCCGGGCTCG
4->CGAAGATTCTAA
4->5
Sample Output:
22
AACTCATGATAT->CTATCAGGATCG:6
CTTTTAGAAGCG->CTATCAGGATCG:4
CGAAGATTCTAA->CTAACAGGCTCG:6
CTATCAGGATCG->CTTTTAGAAGCG:4
CTATCAGGATCG->CTAACAGGCTCG:2
CTATCAGGATCG->AACTCATGATAT:6
CTAACAGGCTCG->ATGCCGGGCTCG:4
CTAACAGGCTCG->CGAAGATTCTAA:6
CTAACAGGCTCG->CTATCAGGATCG:2
ATGCCGGGCTCG->CTAACAGGCTCG:4

21
AACTCATGATAT->CTATCATGCTAA:5
CTTTTAGAAGCG->CTTTCAGGCTCG:4
CGAAGATTCTAA->CTATCATGCTAA:4
CTATCATGCTAA->CTTTCAGGCTCG:4
CTATCATGCTAA->CGAAGATTCTAA:4
CTATCATGCTAA->AACTCATGATAT:5
CTTTCAGGCTCG->ATGCCGGGCTCG:4
CTTTCAGGCTCG->CTTTTAGAAGCG:4
CTTTCAGGCTCG->CTATCATGCTAA:4
ATGCCGGGCTCG->CTTTCAGGCTCG:4

Time Limit: 5 mins



* CODE CHALLENGE: Implement the FarthestFirstTraversal clustering heuristic.
     Input: Integers k and m followed by a set of points Data in m-dimensional space.
     Output: A set Centers consisting of k points (centers) resulting from applying
     FarthestFirstTraversal(Data, k), where the first point from Data is chosen as the
     first center to initialize the algorithm.

Extra Dataset

Sample Input:
3 2
0.0 0.0
5.0 5.0
0.0 5.0
1.0 1.0
2.0 2.0
3.0 3.0
1.0 2.0
Sample Output:
0.0 0.0
5.0 5.0
0.0 5.0


* Squared Error Distortion Problem:  Compute the squared error distortion of a set of data points with respect to a set of centers. 
  Input: A set of points Data and a set of centers Centers. 
  Output: The squared error distortion Distortion(Data, Centers). 

CODE CHALLENGE: Solve the Squared Error Distortion Problem.
     Input: Integers k and m, followed by a set of centers Centers and a set of points Data.
     Output: The squared error distortion Distortion(Data, Centers).

Extra Dataset

Sample Input:
2 2
2.31 4.55
5.96 9.08
--------
3.42 6.03
6.23 8.25
4.76 1.64
4.47 4.33
3.95 7.61
8.93 2.97
9.74 4.03
1.73 1.28
9.72 5.01
7.27 3.77
Sample Output:
18.246

* CODE CHALLENGE: Implement the Lloyd algorithm for k-means clustering.
     Input: Integers k and m followed by a set of points Data in m-dimensional space.
     Output: A set Centers consisting of k points (centers) resulting from applying the
     Lloyd algorithm to Data and Centers, where the first k points from Data are selected
     as the first k centers.

Extra Dataset

Sample Input:
2 2
1.3 1.1
1.3 0.2
0.6 2.8
3.0 3.2
1.2 0.7
1.4 1.6
1.2 1.0
1.2 1.1
0.6 1.5
1.8 2.6
1.2 1.3
1.2 1.0
0.0 1.9
Sample Output:
1.800 2.867
1.060 1.140

Time Limit: 5 mins

* CODE CHALLENGE: Implement the expectation maximization algorithm for soft k-means clustering.
     Input: Integers k and m, followed by a stiffness parameter β, followed by a set of points
     Data in m-dimensional space.
     Output: A set Centers consisting of k points (centers) resulting from applying the
     expectation maximization algorithm for soft k-means clustering. Select the first k points
     from Data as the first centers for the algorithm and run the algorithm for 100 E-steps
     and 100 M-steps. Results should be accurate up to three decimal places.

Extra Dataset

Sample Input:
2 2
2.7
1.3 1.1
1.3 0.2
0.6 2.8
3.0 3.2
1.2 0.7
1.4 1.6
1.2 1.0
1.2 1.1
0.6 1.5
1.8 2.6
1.2 1.3
1.2 1.0
0.0 1.9
Sample Output:
1.662 2.623
1.075 1.148

Time Limit: 5 mins

* CODE CHALLENGE: Implement HierarchicalClustering.
     Input: An integer n, followed by an n x n distance matrix.
     Output: The result of applying HierarchicalClustering to this distance matrix (using Davg),
     with each newly created cluster listed on each line.

Extra Dataset

Sample Input:
7
0.00 0.74 0.85 0.54 0.83 0.92 0.89
0.74 0.00 1.59 1.35 1.20 1.48 1.55
0.85 1.59 0.00 0.63 1.13 0.69 0.73
0.54 1.35 0.63 0.00 0.66 0.43 0.88
0.83 1.20 1.13 0.66 0.00 0.72 0.55
0.92 1.48 0.69 0.43 0.72 0.00 0.80
0.89 1.55 0.73 0.88 0.55 0.80 0.00
Sample Output:
4 6
5 7
3 4 6
1 2
5 7 3 4 6
1 2 5 7 3 4 6

Time Limit: 5 mins
